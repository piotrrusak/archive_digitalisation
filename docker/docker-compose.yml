services:
  db_auth:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres_auth
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - db_auth:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_auth"]
      interval: 5s
      timeout: 5s
      retries: 5
  postgres:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_DB: swiftdb
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5434:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d swiftdb"]
      interval: 5s
      timeout: 10s
      retries: 5
  ocr:
    build:
      context: ../ocr
    ports:
      - "8000:8000"
    environment:
      BACKEND_BASE_URL: "http://app:8080"
      TXT_FORMAT_ID: "7"

  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: showcase
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/swiftdb"
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"

      # >>> Add these for the external auth client (Spring Boot relaxed binding maps ENV -> properties):
      AUTH_BASE_URL: "http://host.docker.internal:4000"
      AUTH_PATH: "/api/v1/token/verify"
      AUTH_CONNECT_TIMEOUT_MS: "1000"
      AUTH_READ_TIMEOUT_MS: "1500"

    # On Linux, make sure this hostname resolves:
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  db_auth:
  pg_data:
